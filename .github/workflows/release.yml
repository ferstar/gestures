name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 0.8.0, leave empty to use Cargo.toml version)"
        required: false
        type: string
      create_tag:
        description: "Create and push git tag"
        required: false
        default: true
        type: boolean
      create_github_release:
        description: "Create GitHub Release"
        required: false
        default: true
        type: boolean

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test before release
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release-ubuntu"

      - name: Grant permissions to APT cache directory
        run: sudo chown -R $USER:$USER /var/cache/apt/archives

      - name: Cache APT packages
        id: apt-cache
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: apt-packages-${{ runner.os }}-${{ hashFiles('.github/workflows/release.yml') }}
          restore-keys: |
            apt-packages-${{ runner.os }}-

      - name: Install system dependencies
        run: |
          if [[ "${{ steps.apt-cache.outputs.cache-hit }}" != "true" ]]; then
            sudo apt-get update
          fi
          sudo apt-get install -y libudev-dev libinput-dev libxdo-dev

      - name: Run tests
        run: cargo test --verbose

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: test
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: gestures
            asset_name: gestures-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: gestures
            asset_name: gestures-linux-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release-${{ matrix.target }}"

      - name: Grant permissions to APT cache directory
        run: sudo chown -R $USER:$USER /var/cache/apt/archives

      - name: Cache APT packages
        id: apt-cache
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: apt-packages-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('.github/workflows/release.yml') }}
          restore-keys: |
            apt-packages-${{ runner.os }}-${{ matrix.target }}-
            apt-packages-${{ runner.os }}-

      - name: Install system dependencies (x86_64)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          if [[ "${{ steps.apt-cache.outputs.cache-hit }}" != "true" ]]; then
            sudo apt-get update
          fi
          sudo apt-get install -y libudev-dev libinput-dev libxdo-dev

      - name: Install system dependencies (aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          if [[ "${{ steps.apt-cache.outputs.cache-hit }}" != "true" ]]; then
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu
            sudo dpkg --add-architecture arm64
            sudo apt-get update
          fi
          sudo apt-get install -y libudev-dev:arm64 libinput-dev:arm64 libxdo-dev:arm64
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Update version if specified
        if: github.event.inputs.version != ''
        run: |
          VERSION="${{ github.event.inputs.version }}"
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
          echo "Updated version to $VERSION"

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Strip binary
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Create tarball
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          mv ${{ matrix.asset_name }}.tar.gz ../../..

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}.tar.gz
          if-no-files-found: error

  create-tag:
    name: Create Git Tag
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_tag == 'true' && github.event.inputs.version != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create and push tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${VERSION}" -m "Release v${VERSION}"
          git push origin "v${VERSION}"
          echo "Created and pushed tag v${VERSION}"

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: always() && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_github_release == 'true')) && needs.build.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Extract version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.version }}" ]; then
              VERSION="${{ github.event.inputs.version }}"
            else
              VERSION=$(grep '^version =' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
            fi
            TAG="v${VERSION}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            TAG=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Version: $VERSION, Tag: $TAG"

      - name: Ensure tag exists
        run: |
          TAG="${{ steps.get_version.outputs.tag }}"
          if ! git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG does not exist, creating it..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "Created and pushed tag $TAG"
          else
            echo "Tag $TAG already exists"
          fi

      - name: Generate changelog
        id: changelog
        run: |
          TAG="${{ steps.get_version.outputs.tag }}"
          PREV_TAG=$(git describe --tags --abbrev=0 "$TAG^" 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log ${PREV_TAG}..${TAG} --pretty=format:"- %s (%h)" --no-merges)
          fi

          echo "$CHANGELOG" > changelog.txt

          {
            echo 'changelog<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f -name "*.tar.gz" -exec cp {} release-assets/ \;
          ls -lh release-assets/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.tag }}
          name: Release ${{ steps.get_version.outputs.tag }}
          body_path: changelog.txt
          files: release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
